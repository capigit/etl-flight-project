import requests
import pandas as pd
import sqlite3
import time
import gspread
from datetime import datetime

# üü¢ EXTRACTION : R√©cup√©rer les donn√©es de vol
def extract_flight_data():
    url = "https://opensky-network.org/api/states/all"
    response = requests.get(url)
    data = response.json()

    # V√©rifie si "states" contient des donn√©es
    if "states" in data and data["states"]:
        flights = pd.DataFrame(data["states"])  # Charge toutes les colonnes dynamiquement

        # Nommer les colonnes correctement (d'apr√®s la doc OpenSky)
        flights.columns = [
            "icao24", "callsign", "origin_country", "time_position", "last_contact",
            "longitude", "latitude", "baro_altitude", "on_ground", "velocity",
            "true_track", "vertical_rate", "sensors", "geo_altitude", "squawk",
            "spi", "position_source"
        ]
        return flights
    else:
        print("‚ö†Ô∏è Aucune donn√©e r√©cup√©r√©e depuis l'API OpenSky")
        return pd.DataFrame()  # Retourne un DataFrame vide si l'API ne renvoie rien

# üîß TRANSFORMATION : Nettoyer et formater les donn√©es
def transform_flight_data(df):
    df = df.dropna()
    df["time_position"] = df["time_position"].apply(lambda x: datetime.utcfromtimestamp(x) if x > 0 else None)
    df["altitude_feet"] = df["baro_altitude"] * 3.281  # Conversion m√®tres ‚Üí pieds
    return df

# üíæ CHARGEMENT : Stocker dans SQLite
def load_to_sqlite(df, db_name="flights.db"):
    conn = sqlite3.connect(db_name)
    df.to_sql("flights", conn, if_exists="replace", index=False)
    conn.close()
    print("‚úÖ Donn√©es charg√©es dans SQLite")

# üì§ EXPORTATION : Envoyer les donn√©es vers Google Sheets
def export_to_google_sheets(df):
    try:
        gc = gspread.service_account()  # Pas besoin de fichier JSON ici !
        sheet = gc.open_by_key("157Hy-Mytfy_hFuwX9iPdpkSkZ2kh1eqh9NbCLKJuKDo").sheet1
        sheet.clear()  # Efface les anciennes donn√©es
        sheet.update([df.columns.values.tolist()] + df.values.tolist())  # Mise √† jour
        print("‚úÖ Donn√©es mises √† jour sur Google Sheets")
    except Exception as e:
        print(f"‚ùå Erreur d'exportation vers Google Sheets : {e}")

# üöÄ PIPELINE AUTOMATIQUE (Ex√©cution continue toutes les heures)
if __name__ == "__main__":
    while True:
        print("üîÑ Ex√©cution du pipeline ETL...")
        
        # 1Ô∏è‚É£ Extraction
        df = extract_flight_data()
        
        # 2Ô∏è‚É£ Transformation
        df_clean = transform_flight_data(df)
        
        # 3Ô∏è‚É£ Chargement en base SQLite
        load_to_sqlite(df_clean)
        
        # 4Ô∏è‚É£ Export vers Google Sheets
        export_to_google_sheets(df_clean)

        print("‚úÖ Pipeline ex√©cut√© avec succ√®s ! Attente 1 heure...")
        time.sleep(3600)  # Ex√©cuter toutes les heures